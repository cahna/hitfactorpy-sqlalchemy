from _typeshed import Incomplete
from collections.abc import Generator
from sqlalchemy_utils import get_column_key as get_column_key

class ColumnReflector:
    parent_table: Incomplete
    model: Incomplete
    manager: Incomplete
    def __init__(self, manager, parent_table, model: Incomplete | None = ...) -> None: ...
    def option(self, name): ...
    def reflect_column(self, column): ...
    @property
    def operation_type_column(self): ...
    @property
    def transaction_column(self): ...
    @property
    def end_transaction_column(self): ...
    @property
    def reflected_parent_columns(self) -> Generator[Incomplete, None, None]: ...
    def __iter__(self): ...

class TableBuilder:
    manager: Incomplete
    parent_table: Incomplete
    model: Incomplete
    def __init__(self, versioning_manager, parent_table, model: Incomplete | None = ...) -> None: ...
    def option(self, name): ...
    @property
    def table_name(self): ...
    @property
    def columns(self): ...
    def __call__(self, extends: Incomplete | None = ...): ...
