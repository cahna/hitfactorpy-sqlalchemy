import sqlalchemy as sa
from .exc import ClassNotVersioned as ClassNotVersioned
from _typeshed import Incomplete
from collections.abc import Generator

def get_versioning_manager(obj_or_class): ...
def option(obj_or_class, option_name): ...
def tx_column_name(obj): ...
def end_tx_column_name(obj): ...
def end_tx_attr(obj): ...
def parent_class(version_cls): ...
def transaction_class(cls): ...
def version_obj(session, parent_obj): ...
def version_class(model): ...
def version_table(table): ...
def versioned_objects(session) -> Generator[Incomplete, None, None]: ...
def is_versioned(obj_or_class): ...
def versioned_column_properties(obj_or_class) -> Generator[Incomplete, None, None]: ...
def versioned_relationships(obj, versioned_column_keys) -> Generator[Incomplete, None, None]: ...
def vacuum(session, model, yield_per: int = ...) -> None: ...
def is_table_column(column): ...
def is_internal_column(model, column_name): ...
def is_modified_or_deleted(obj): ...
def is_modified(obj): ...
def is_session_modified(session): ...
def count_versions(obj): ...
def changeset(obj): ...

class VersioningClauseAdapter(sa.sql.visitors.ReplacingCloningVisitor):
    def replace(self, col): ...

def adapt_columns(expr): ...
